;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Sat Jan 14 2023
; Processor: PIC16F84A
; Compiler:  MPASM (Proteus)
;====================================================================

;====================================================================
; DEFINITIONS
;====================================================================

#include p16f84a.inc                ; Include register definition file

;====================================================================
; VARIABLES
;====================================================================
delay1 				equ 	0x30
delay2 				equ 	0x31
w_temp				equ	0x32
status_temp			equ	0x33

state 				equ 	0x34
STATE_WAIT			equ	0x0
STATE_READ_USER	equ	0x1
STATE_READ_PASS	equ	0x2
STATE_WAIT_READ_USER_END equ 0x3

buffer				equ	0x35
index				equ	0x39
eepromTempBuffer    equ 0x40
eepromTempIndex     equ 0x44
BUFFER_SIZE			equ	0x4

boolResult         equ 0x45
FALSE               equ 0x0
TRUE                equ 0x1

parseResult     equ 0x46
ZERO equ 0x0
ONE equ 0x1
TWO equ 0x2
THREE equ 0x3
FOUR equ 0x4
FIVE equ 0x5
SIX equ 0x6
SEVEN equ 0x7
EIGHT equ 0x8
NINE equ 0x9
ASTERISK equ 0xA
SQUARE equ 0xB

eepromUserPassAddress   equ 0x47
delay3 				equ 	0x48
USERS_COUNT equ 0x4
PASS_OFFSET equ 0x10; 20 = USERS COUNT * BUFFER SIZE

__CONFIG   _CP_OFF & _WDT_OFF & _PWRTE_ON & _RC_OSC

org 0x2100 ; EEPROM offset specific for PIC16F84A
de "11112222333344441111222233334444" ; put users and pass, 1111 userId with 1111 userPass
      
;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================
; Reset Vector
ORG  0x000 
      goto  Start
; Interupt service routine
      
DELAY:
	BCF STATUS, RP0 ; Bank 0
	MOVLW 0xC4
	MOVWF delay1
	MOVLW 0xC4
	MOVWF delay2
DELAY_LOOP_START:
	DECFSZ delay1, 1
	GOTO DELAY_LOOP_ADDITIONAL
	DECFSZ delay2, 1	
DELAY_LOOP_ADDITIONAL:
	GOTO DELAY_LOOP_START
	RETURN
	
PRINT_SUCCESS:
   CLRF PORTA
   MOVLW 0xC
   MOVWF PORTA
   RETURN
 
PRINT_ERROR:
   CLRF PORTA
   MOVLW 0xE
   MOVWF PORTA
   RETURN
 
PRINT_DEFAULT:
   CLRF PORTA
   MOVLW 0xD
   MOVWF PORTA
   RETURN

; after call the W contains the chacter code
PARSE_CHARACTER_W:     
     MOVLW 0x20
     MOVWF parseResult

     MOVF PORTB, 0
     ANDLW b'11111000'
     IORLW b'00000011'
     MOVWF PORTB
     
     BTFSS PORTB, 4
     MOVLW 1
     BTFSS PORTB, 4
     MOVWF parseResult
     BTFSS PORTB, 5
     MOVLW 4
     BTFSS PORTB, 5
     MOVWF parseResult
     BTFSS PORTB, 6
     MOVLW 7
     BTFSS PORTB, 6
     MOVWF parseResult
     BTFSS PORTB, 7
     MOVLW 0x0A
     BTFSS PORTB, 7
     MOVWF parseResult
     
     MOVF PORTB, 0
     ANDLW b'11111000'
     IORLW b'00000101'
     MOVWF PORTB

     BTFSS PORTB, 4
     MOVLW 2
     BTFSS PORTB, 4
     MOVWF parseResult
     BTFSS PORTB, 5
     MOVLW 5
     BTFSS PORTB, 5
     MOVWF parseResult
     BTFSS PORTB, 6
     MOVLW 8
     BTFSS PORTB, 6
     MOVWF parseResult
     BTFSS PORTB, 7
     MOVLW 0
     BTFSS PORTB, 7
     MOVWF parseResult
     
     MOVF PORTB, 0
     ANDLW b'11111000'
     IORLW b'00000110'
     MOVWF PORTB

     BTFSS PORTB, 4
     MOVLW 3
     BTFSS PORTB, 4
     MOVWF parseResult
     BTFSS PORTB, 5
     MOVLW 6
     BTFSS PORTB, 5
     MOVWF parseResult
     BTFSS PORTB, 6
     MOVLW 9
     BTFSS PORTB, 6
     MOVWF parseResult
     BTFSS PORTB, 7
     MOVLW 0x0B
     BTFSS PORTB, 7
     MOVWF parseResult
     
    MOVF PORTB, 0
    ANDLW b'11111000'
    MOVWF PORTB
     RETURN

HANDLE_WRITE_BUFFER:
    MOVLW buffer
    ADDWF index, 0
    MOVWF FSR
    MOVF parseResult, 0
    MOVWF INDF
    INCF index, 1
    RETURN

HANDLE_START_READ_USER:
    MOVLW ASTERISK
    SUBWF parseResult, 0
    BTFSS STATUS, Z
    RETURN
    CALL PRINT_SUCCESS
    MOVLW STATE_READ_USER
    MOVWF state
    CLRF index
    RETURN

READ_TO_EEPROM_BUFFER:
    CLRF index
    READ_TO_EEPROM_BUFFER_LOOP:
        MOVLW eepromTempBuffer
        ADDWF index, 0
        MOVWF FSR
        MOVF eepromTempIndex, 0
        MOVWF EEADR
        BSF STATUS, RP0
        BSF EECON1, RD
        BCF STATUS, RP0
        MOVF EEDATA, 0
        MOVWF INDF
        INCF index, 1
        INCF eepromTempIndex, 1
	MOVF index, 0
        SUBLW BUFFER_SIZE
        BTFSS STATUS, Z
        GOTO READ_TO_EEPROM_BUFFER_LOOP
    RETURN

COMPARE_BUFFERS:
    CLRF index
    COMPARE_BUFFERS_LOOP:
        ; get first item to compare
        MOVLW buffer
        ADDWF index
        MOVWF FSR
        MOVF INDF, 0
        MOVWF boolResult ; bool resulte temporaly stores value to compare

        ; get second item to compare
        MOVLW eepromTempBuffer
        ADDWF index
        MOVWF FSR
        MOVF INDF, 0

        SUBWF boolResult, 0
        BTFSC STATUS, Z ; if the result is not Z, scip loop end and return false
        GOTO COMPARE_BUFFERS_LOOP_END
    COMPARE_BUFFERS_RETURN_FALSE:
        MOVLW FALSE
        MOVWF boolResult
        RETURN
    COMPARE_BUFFERS_LOOP_END:
        INCF index, 1
	MOVF index, 0
        SUBLW BUFFER_SIZE
        BTFSS STATUS, Z
        GOTO COMPARE_BUFFERS_LOOP
    COMPARE_BUFFERS_RETURN_TRUE:
        MOVLW TRUE
        MOVWF boolResult
        RETURN

; sets to eepromPassAddress the address of pass to compare
; buffer contains user id
; on success set boolResult to true
; and put address of pass into eepromUserPassAddress
TRY_FIND_USER_PASS:
    CLRF eepromTempIndex
    TRY_FIND_USER_PASS_LOOP:
        MOVLW PASS_OFFSET
	SUBWF eepromTempIndex, 0
	BTFSC STATUS, Z
	GOTO TRY_FIND_USER_PASS_RETURN_FALSE
        CALL READ_TO_EEPROM_BUFFER
        CALL COMPARE_BUFFERS
        MOVLW TRUE
        SUBWF boolResult
        BTFSS STATUS, Z
        GOTO TRY_FIND_USER_PASS_LOOP
    ; move eepromTempIndex to the pass
    DECF eepromTempIndex, 0
    ADDLW PASS_OFFSET
    MOVWF eepromUserPassAddress
    MOVLW TRUE
    MOVWF boolResult
    RETURN;
TRY_FIND_USER_PASS_RETURN_FALSE:
    MOVLW FALSE
    MOVWF boolResult
    CALL PRINT_ERROR
    RETURN


HANDLE_END_READ_USER_SUCCESS:
    MOVLW STATE_READ_PASS
    MOVWF state
    CLRF index
    RETURN

HANDLE_END_READ_USER_FAIL:
    MOVLW STATE_WAIT
    MOVWF state
    CLRF index
    CALL PRINT_ERROR
    RETURN

 PRINT_PARSE_RESULT:
   MOVF parseResult, 0
   MOVWF PORTA
   RETURN
    
TRY_HANDLE_END_READ_USER:
    MOVLW ASTERISK
    SUBWF parseResult, 0
    BTFSC STATUS, Z
    RETURN
    
    MOVLW SQUARE
    SUBWF parseResult, 0
    BTFSC STATUS, Z
    RETURN
    
    MOVF index, 0
    SUBLW BUFFER_SIZE
    BTFSS STATUS, Z
    CALL PRINT_PARSE_RESULT
    BTFSS STATUS, Z
    RETURN
    CALL PRINT_SUCCESS
    MOVLW STATE_WAIT_READ_USER_END
    MOVWF state
    RETURN

 HANDLE_WAIT_READ_USER_END:
    MOVLW SQUARE
    SUBWF parseResult, 0
    BTFSS STATUS, Z
    RETURN

    CALL TRY_FIND_USER_PASS
    
    MOVLW TRUE
    SUBWF boolResult, 0
    BTFSC STATUS, Z ;ZERO
    CALL HANDLE_END_READ_USER_SUCCESS

    MOVLW FALSE
    SUBWF boolResult, 0
    BTFSC STATUS, Z ;ZERO
    CALL HANDLE_END_READ_USER_FAIL
    RETURN

HANDLE_READ_USER:
    CALL HANDLE_WRITE_BUFFER
    CALL TRY_HANDLE_END_READ_USER
    RETURN

; compare pass in eemprom with buffer
COMPARE_USER_PASS:
    CALL READ_TO_EEPROM_BUFFER
    CALL COMPARE_BUFFERS
    RETURN

TRY_HANDLE_END_READ_PASS:
    MOVF index, 0
    SUBWF BUFFER_SIZE, 0
    BTFSC STATUS, Z
    RETURN
    MOVLW STATE_WAIT
    MOVWF state
    CLRF index

    CALL COMPARE_USER_PASS
    MOVLW TRUE
    SUBWF boolResult, 0
    BTFSC STATUS, Z ;ZERO
    CALL PRINT_SUCCESS

    MOVLW FALSE
    SUBWF boolResult, 0
    BTFSC STATUS, Z ;ZERO
    CALL PRINT_ERROR
    RETURN

HANDLE_READ_PASS:
    CALL HANDLE_WRITE_BUFFER
    CALL TRY_HANDLE_END_READ_PASS
    RETURN
      
HANDLE_BUTTON_CLICK:
    MOVLW STATE_READ_PASS
    SUBWF state, 0
    BTFSC STATUS, Z ;ZERO
    CALL HANDLE_WRITE_BUFFER
    
    
    MOVLW STATE_WAIT_READ_USER_END
    SUBWF state, 0
    BTFSC STATUS, Z ;ZERO
    CALL HANDLE_WAIT_READ_USER_END

    MOVLW STATE_READ_USER
    SUBWF state, 0
    BTFSC STATUS, Z ;ZERO
    CALL HANDLE_READ_USER
    
    MOVLW STATE_WAIT
    SUBWF state, 0
    BTFSC STATUS, Z ;ZERO
    CALL HANDLE_START_READ_USER
    RETURN

;====================================================================
; CODE SEGMENT
;====================================================================

PGM   code
Start
     BCF STATUS, RP0 ; Bank 0
     CLRF PORTB; Initializing PORTB
     CLRF PORTA ; Initializing PORTA
     BSF STATUS, RP0 ; Bank 1
     MOVLW b'11110000' ; bit value for TRISB state
     MOVWF TRISB
     CLRF TRISA
     BCF OPTION_REG, 7 
     BCF STATUS, RP0 ; Bank 0
    
    MOVLW STATE_WAIT
    MOVWF state
    CALL PRINT_DEFAULT
Loop  
      CALL PARSE_CHARACTER_W
      MOVF parseResult, 0
      SUBLW 0x20
      BTFSS STATUS, Z
      CALL HANDLE_BUTTON_CLICK
      goto  Loop

;====================================================================
      END
